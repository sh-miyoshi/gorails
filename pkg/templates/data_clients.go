package templates

var templateClientTsConfig = `{
  "compilerOptions": {
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
`

var templateClientIndex = `import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter, Route, Routes } from 'react-router-dom';
import Index from './pages';

ReactDOM.render(
  <React.StrictMode>
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Index />} />
      </Routes>
    </BrowserRouter>
  </React.StrictMode>,
  document.getElementById('root')
);
`

var templateClientHttpRequest = `import axios, { AxiosPromise } from 'axios'

type Method = 'get' | 'post' | 'put' | 'patch' | 'delete'

interface APIResponse {
  status: number
  data?: Record<string, unknown>
}

export const httpRequest = <T = APIResponse>(method: Method, url: string, body?: {}): AxiosPromise<T> => {
  const headers = {}
  const token = window.localStorage.getItem("token")
  if (token !== "") {
    headers["Authorization"] = "Bearer " + token
  }

  return new Promise((resolve, reject) => {
    axios({
      method,
      url,
      data: body,
      headers
    })
      .then((res) => resolve(res))
      .catch((err) => {
        window.console.error(err)
        if (err?.response?.status === 422) {
          window.location.reload()
        }
        reject(err)
      })
  })
}
`

var templateApplicationTs = `// This file will create automatically by gorails command
// So do not edit this file
{{ range . }}
export interface {{ .Type }} {
{{ range .Columns }}	{{ .SnakeKey }}: {{ .JSFormat }}{{ end }}
}{{ end }}
`

var templateClientIndexPageContent = `import React, { useState, useEffect } from 'react';
import { httpRequest } from '../helpers/http_request';

const Index = () => {
  const [serverHealth, setServerHealth] = useState<string>("No...")

  useEffect(() => {
    httpRequest<string>('get', "http://localhost:3100/api/healthz")
      .then((res) => {
        setServerHealth(res.data)
      })
      .catch((err) => {
        window.console.error(err)
      })
  }, [setServerHealth])

  return (
    <div>
      <h1>go rails app</h1>
      <p>Server healthy: {serverHealth}</p>
      <p>Find me in src/pages/index.tsx</p>
    </div>
  )
}
export default Index
`
